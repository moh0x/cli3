const express = require('express')
const { body } = require('express-validator')
const router = express.Router()
const authController = require('../controller/auth_user')
const {verifyToken} = require('../utility/verifyToken')
const { verifyAdmin } = require('../utility/verify_role_admin')
router.post('/signup',body('password').isLength({min:8,max:50}).withMessage('type valid password'),body('username').isString().isLength({min:6,max:30}).withMessage('type valid username'),body('email').isLength({min:5,max:50}).withMessage('type valid email'),authController.signUp)
router.post('/login',body("email").isLength({min:5,max:50}).withMessage("type valid email"),body('password').isLength({min:8,max:50}).withMessage('type valid password'),authController.login)
router.post('/login/client',body("email").isLength({min:5,max:50}).withMessage("type valid email"),body('password').isLength({min:8,max:50}).withMessage('type valid password'),authController.loginClient)
router.post('/client/add',verifyToken,authController.addClient)
router.post('/client/delete',verifyToken,authController.deleteClient)
router.post('/voyage/add',verifyToken,authController.addVoyage)
router.post('/analyse/add',verifyToken,authController.addAnalyse)
router.post('/product/add',verifyToken,authController.addProduct)
router.post('/mard/add',verifyToken,authController.addMarad)
router.get('/analyse/client',verifyToken,authController.analyseClient)
router.get('/mard/client',verifyToken,authController.mardClient)
router.get('/product/client',verifyToken,authController.productClient)
router.get('/analyse/eng',verifyToken,authController.analyseEng)
router.get('/mard/eng',verifyToken,authController.mardEng)
router.get('/product/eng',verifyToken,authController.productEng)
router.get('/voyage/client',verifyToken,authController.voyagesClient)
router.get('/voyage/eng',verifyToken,authController.voyagesEng)
router.post('/logout',verifyToken,authController.logout)
router.put('/update-profile',verifyToken,authController.updateProfile)
router.put('/update-notification',verifyToken,authController.updateNotificationToken)
router.get('/client-info',verifyToken,authController.clientInfo)
router.get('/user-info',verifyToken,authController.userInfo)
router.get('/clients',verifyToken,authController.clientsEng)
router.get('/statics/eng',verifyToken,authController.staticsEng)
router.get('/inActive',verifyToken,verifyAdmin,authController.getInActiveUsers)
router.put('/active',verifyToken,verifyAdmin,authController.activeUser)
router.get('/active',verifyToken,verifyAdmin,authController.getActiveUsers)
router.put('/inActive',verifyToken,verifyAdmin,authController.inActiveUser)
router.put('/ban',verifyToken,verifyAdmin,authController.ban)
router.put('/disBan',verifyToken,verifyAdmin,authController.disBan)
router.put('/status',verifyToken,authController.changeUserStates)
router.delete('/delete',verifyToken,authController.deleteUser)
router.delete('/delete/client',verifyToken,authController.deleteClientByAdmin)
router.put('/client/edit',verifyToken,authController.editClient)
router.put('/analyse/finish',verifyToken,authController.finishAnalyse)
router.put('/mard/finish',verifyToken,authController.finishMard)
router.put('/product/finish',verifyToken,authController.finishProduct)
router.post('/client/get',verifyToken,authController.getClientByIdEng)
router.get('/statics/admin',verifyToken,authController.staticsAdmin)
router.delete('/delete/analyse',verifyToken,authController.deleteAnalyseByAdmin)
router.delete('/delete/mard',verifyToken,authController.deleteMardeByAdmin)

module.exports = router


